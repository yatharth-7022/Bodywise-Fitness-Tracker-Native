generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  profilePicture String? 
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshToken  RefreshToken[]
  exerciseSets  ExerciseSet[]
  personalBests PersonalBest[]
  routines      Routine[]
  weights       Weight[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String    @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Weight {
  id        Int      @id @default(autoincrement())
  value     Float
  note      String?
  date      DateTime @default(now())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Exercise {
  id            Int               @id @default(autoincrement())
  name          String
  description   String?
  bodyPart      String
  imageUrl      String?
  videoUrl      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  personalBests PersonalBest[]
  routines      RoutineExercise[]
}

model Routine {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  isDefault   Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  imageUrl    String?
  duration    Int?
  userId      Int?
  user        User?             @relation(fields: [userId], references: [id])
  exercises   RoutineExercise[]
}

model RoutineExercise {
  id           Int           @id @default(autoincrement())
  routineId    Int
  exerciseId   Int
  sets         Int           @default(3)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  exerciseSets ExerciseSet[]
  exercise     Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  routine      Routine       @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@unique([routineId, exerciseId])
}

model ExerciseSet {
  id                Int             @id @default(autoincrement())
  routineExerciseId Int
  weight            Float
  reps              Int
  isCompleted       Boolean         @default(false)
  userId            Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  routineExercise   RoutineExercise @relation(fields: [routineExerciseId], references: [id], onDelete: Cascade)
  user              User?           @relation(fields: [userId], references: [id])

  @@index([routineExerciseId])
  @@index([userId])
}

model PersonalBest {
  id         Int      @id @default(autoincrement())
  userId     Int
  exerciseId Int
  weight     Float
  reps       Int
  date       DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, exerciseId])
  @@index([userId])
  @@index([exerciseId])
}
